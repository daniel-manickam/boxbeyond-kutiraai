{
  "name": "Dataset Generator - Google Drive",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -40,
        240
      ],
      "id": "7e53305d-d129-4964-93fa-f388adeb6e87",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "fieldToSplitOut": "chatInput",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1720,
        -520
      ],
      "id": "1b790fc6-72a0-48e3-975f-404268a39c93",
      "name": "Split Out"
    },
    {
      "parameters": {
        "fieldToSplitOut": "chunk_array",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        2520,
        -520
      ],
      "id": "5c1f54fe-ba31-4597-9fb7-9d9a4b77007b",
      "name": "Split Out1"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "0fe9bf6a-b341-4998-b298-41ed0aa8c118",
        "responseMode": "lastNode",
        "responseData": "noData",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -40,
        0
      ],
      "id": "7a2d1c85-eb40-4163-9904-f23c61fb76d8",
      "name": "Webhook",
      "webhookId": "0fe9bf6a-b341-4998-b298-41ed0aa8c118"
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "limit": 1,
        "filter": {
          "whatToSearch": "files",
          "fileTypes": [
            "application/vnd.google-apps.document"
          ]
        },
        "options": {
          "fields": [
            "mimeType",
            "id",
            "webViewLink",
            "name"
          ]
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        440,
        0
      ],
      "id": "057210de-39f1-4b69-9e30-b6223aa8a6f4",
      "name": "List Files From Drive",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "luNQOzK3RMAUxYG6",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.mimeType }}",
                    "rightValue": "application/vnd.google-apps.document",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "document"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "703aca85-2eb6-4af1-8521-0b7f04e2b2c8",
                    "leftValue": "={{ $json.mimeType }}",
                    "rightValue": "application/vnd.google-apps.presentation",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "presentation"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "39e620f3-c849-40f3-a7e7-f843bda1c9be",
                    "leftValue": "={{ $json.mimeType }}",
                    "rightValue": "application/vnd.google-apps.spreadsheet",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "spreadsheet"
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        700,
        0
      ],
      "id": "774e042d-750e-4d64-b07c-b7107f1033d7",
      "name": "Document Selector"
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "options": {
          "googleFileConversion": {
            "conversion": {
              "docsToFormat": "text/plain",
              "slidesToFormat": "application/vnd.oasis.opendocument.presentation"
            }
          }
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        980,
        -80
      ],
      "id": "a2d91f7a-0c96-4102-99a3-0ef074635840",
      "name": "File Downloader",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "luNQOzK3RMAUxYG6",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  // Get the input text\n  let text = item.json.data;\n  \n  // Remove any non-printable characters\n  text = text.replace(/[^\\x20-\\x7E\\n]/g, \"\");\n\n  // Remove any JSON-like structures\n  text = text.replace(/\\{[^}]*\\}/g, \"\");\n\n  // Remove multiple consecutive newlines\n  text = text.replace(/\\n{3,}/g, \"\\n\\n\");\n\n  // Trim whitespace from the beginning and end\n  text = text.trim();\n\n  // Split the text into words\n  const words = text.split(/\\s+/);\n\n  // Initialize an array to hold the chunks\n  const chunks = [];\n\n  // Split into chunks of approximately 1000 words\n  for (let i = 0; i < words.length; i += 1000) {\n    const chunk = words.slice(i, i + 1000).join(' ');\n    chunks.push(chunk);\n  }\n\n  // Set the resulting array to item.json.chatInput\n  item.json.chatInput = chunks;\n  // set the other data that we need\n  item.json.input_params =$('Webhook').first().json.body\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1780,
        60
      ],
      "id": "227bdb04-2010-4c9e-8344-932fc2f7d732",
      "name": "Split the text"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Your task is to divide the text into smaller, coherent chunks. Follow these steps: 1. Divide the text into chunks of approximately 500 words each. 2. Ensure each chunk maintains context and doesn't break mid-sentence or mid-paragraph. 3. Start each chunk with a delimiter '**CHUNK-1', '**CHUNK-2'. This is the text  {{ $json.chatInput }}"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        1920,
        -520
      ],
      "id": "fe821dbd-76dd-4b3f-85f6-b9b30e13c35a",
      "name": "Chunk Creator"
    },
    {
      "parameters": {
        "model": "mistral-7b-Q4:latest",
        "options": {
          "temperature": 0.1,
          "numGpu": -1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmOllama",
      "typeVersion": 1,
      "position": [
        2000,
        -340
      ],
      "id": "4ab26757-955f-44d9-9e4d-ed2d1881ab05",
      "name": "Mistral Model",
      "credentials": {
        "ollamaApi": {
          "id": "iFXMTkBJ2tZZKutU",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "function splitIntoChunks(text) {\n    // Split the text by the chunk delimiter\n    const chunks = text.split(/\\*\\*CHUNK-\\d+\\:\\s*/);\n    \n    // Remove any empty chunks and trim whitespace\n    const cleanChunks = chunks.filter(chunk => chunk.trim()).map(chunk => chunk.trim());\n    \n    // Add the chunk number back to each chunk\n    return cleanChunks.map((chunk, index) => `CHUNK-${index + 1}\\n\\n${chunk}`);\n}\n\n// Loop over input items and add a new field called 'chunk_array' to the JSON of each one\nfor (const item of $input.all()) {\n    item.json.chunk_array = splitIntoChunks(item.json.text);\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2300,
        -520
      ],
      "id": "248f2e5f-fe3c-431e-ae14-cbd544e6ba66",
      "name": "Chunk Splitter"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a climate change expert. Your task is to create factual, relevant Q&A pairs from the given text chunk. Follow these guidelines: 1. Read and understand the content of the provided chunk thoroughly. 2. Generate sufficient question-answer pairs based solely on the information in the chunk. 3. Ensure questions are clear, concise, and directly related to the content. 4. Provide answers that are accurate and based only on the information given. Answers need to be eloborate. 5. Avoid creating questions or answers that require information from outside the given chunk. 6. Format each Q&A pair as \"Q: [Question]\" and \"A: [Answer]\". Maintain this format without fail. 7. After each pair add a demiliter 'END_PAIR'\nText chunk \n  {{ $json.chunk_array }}"
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        2720,
        -520
      ],
      "id": "06689f8f-c117-4ab9-9336-1083f62c77b2",
      "name": "Q&A Generator",
      "retryOnFail": false
    },
    {
      "parameters": {
        "model": "mistral-7b-Q4:latest",
        "options": {
          "temperature": 0.1,
          "numGpu": -1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmOllama",
      "typeVersion": 1,
      "position": [
        2800,
        -340
      ],
      "id": "d6dc3bc6-8f69-4f2a-a098-f45a84140495",
      "name": "Mistral Model1",
      "credentials": {
        "ollamaApi": {
          "id": "iFXMTkBJ2tZZKutU",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "function splitIntoQAPairs(text, systemPrompt, modelTemplate) {\n    // Split the text into individual Q&A pairs\n    const pairs = text.split('END_PAIR');\n\n    // Process each pair\n    const jsonlData = pairs.map(pair => {\n        if (pair.length > 0) {\n          // Split each pair into question and answer\n          const [question, answer] = pair.split('A:');\n\n          if (question && answer) {\n            // Remove the 'Q: ' prefix from the question\n            const cleanQuestion = question.replace('Q:', '').trim();\n\n            // create the JSONL object\n            const jsonlObject = modelTemplate\n              .replace('{system_prompt}', systemPrompt)\n              .replace('{question}', cleanQuestion)\n              .replace('{answer}', answer);\n    \n            // Return the stringified JSONL object\n            return JSON.stringify(jsonlObject);\n          }\n        }\n    }).filter(Boolean);\n\n    // Join the JSONL objects with newlines\n    return jsonlData.join('\\n');\n}\n// Loop over input items and add a new field called 'myNewField' to the JSON of each one\n\nfor (const item of $input.all()) {\n  const systemPrompt = '';\n  const modelTemplate = '<s>[INST] {question} [/INST] {answer}</s>';\n  if (!item.json.qaPairs) {\n    item.json.qaPairs = ''\n  }\n  item.json.qaPairs = item.json.qaPairs + splitIntoQAPairs(item.json.text, systemPrompt, modelTemplate)\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3100,
        -520
      ],
      "id": "13f93c92-ee43-47e0-95ce-c386a9f835a9",
      "name": "Q&A Splitter",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e6a30857-39f4-4ee7-b325-5f6ef2e109be",
              "name": "body.systemPrompt",
              "value": "={{ $json.body.systemPrompt }}",
              "type": "string"
            },
            {
              "id": "da78bd09-7d24-4f0c-9827-cfb413173382",
              "name": "body.modelTemplate",
              "value": "={{ $json.body.modelTemplate }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        220,
        0
      ],
      "id": "d85803f0-8f72-4d37-bf1a-0c5274c6478c",
      "name": "Edit Fields",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "options": {
          "googleFileConversion": {
            "conversion": {
              "slidesToFormat": "application/pdf"
            }
          }
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        980,
        100
      ],
      "id": "c0636675-0f10-4934-b2e2-ba39d88eff91",
      "name": "File Download As PDF",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "luNQOzK3RMAUxYG6",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1280,
        180
      ],
      "id": "14231414-8755-42c7-9772-4e6e69dcd88a",
      "name": "Extract from PDF"
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "options": {
          "googleFileConversion": {
            "conversion": {
              "sheetsToFormat": "application/pdf"
            }
          }
        }
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        980,
        280
      ],
      "id": "889654d8-cd36-4e1a-bdba-360e2f116bfe",
      "name": "Download Spreasheet as PDF",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "luNQOzK3RMAUxYG6",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list",
          "cachedResultName": "public"
        },
        "table": {
          "__rl": true,
          "value": "dataset_output_table",
          "mode": "list",
          "cachedResultName": "dataset_output_table"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "dataset_id": "={{ $('Webhook').item.json.body.dataset_id }}",
            "jsonl_content": "={{ $json.qaPairs }}",
            "chunk_text": "{{ $('Split Out').item.json.chunk_array }}",
            "filename": "={{ $('List Files From Drive').item.json.name }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "dataset_id",
              "displayName": "dataset_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "chunk_text",
              "displayName": "chunk_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "jsonl_content",
              "displayName": "jsonl_content",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "filename",
              "displayName": "filename",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        3300,
        -520
      ],
      "id": "5adaeb7c-5ef8-4361-a6d0-1b2f5acd1c60",
      "name": "Persist In DB",
      "credentials": {
        "postgres": {
          "id": "XA5EK2QcBpdEUuJn",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "dataset_master_table",
          "mode": "list",
          "cachedResultName": "dataset_master_table"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $('Webhook').item.json.body.dataset_id }}",
            "dataset_status": "Success"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "dataset_name",
              "displayName": "dataset_name",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "dataset_workflow_url",
              "displayName": "dataset_workflow_url",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "dataset_desc",
              "displayName": "dataset_desc",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "dataset_model_template",
              "displayName": "dataset_model_template",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "dataset_status",
              "displayName": "dataset_status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "dataset_system_prompt",
              "displayName": "dataset_system_prompt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        3500,
        -520
      ],
      "id": "65018760-3d47-45ab-b03e-2a2ac12dd7d7",
      "name": "Update Status",
      "credentials": {
        "postgres": {
          "id": "XA5EK2QcBpdEUuJn",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "KqtnwZfiTHtPk6AX",
          "mode": "list",
          "cachedResultName": "Dataset Generator Sub Process"
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.1,
      "position": [
        1980,
        60
      ],
      "id": "7776cbd1-a823-4731-86f0-8ad4430569ae",
      "name": "Execute Workflow"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4e99ddda-a817-46f6-ab0d-be68f33ddf1e",
              "name": "data",
              "value": "={{ $json.data }}",
              "type": "string"
            },
            {
              "id": "4142d90c-779a-44f4-bdd7-b8877f37991a",
              "name": "file_name",
              "value": "={{ $('List Files From Drive').item.json.name }}",
              "type": "string"
            },
            {
              "id": "7ed931d6-c0e4-44a7-9e10-e1c85b177664",
              "name": "input_params",
              "value": "={{ $('Webhook').item.json.body }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1560,
        60
      ],
      "id": "e1421940-6eb4-48bc-961f-90408cb0ca40",
      "name": "Merge Output"
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1260,
        -80
      ],
      "id": "59a18e48-18e3-4fe0-8e86-c61e6f6ef66c",
      "name": "Extract from Text"
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "List Files From Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Chunk Creator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "Q&A Generator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Files From Drive": {
      "main": [
        [
          {
            "node": "Document Selector",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Document Selector": {
      "main": [
        [
          {
            "node": "File Downloader",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File Download As PDF",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download Spreasheet as PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File Downloader": {
      "main": [
        [
          {
            "node": "Extract from Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split the text": {
      "main": [
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chunk Creator": {
      "main": [
        [
          {
            "node": "Chunk Splitter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Model": {
      "ai_languageModel": [
        [
          {
            "node": "Chunk Creator",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Chunk Splitter": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Q&A Generator": {
      "main": [
        [
          {
            "node": "Q&A Splitter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Q&A Generator",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Q&A Splitter": {
      "main": [
        [
          {
            "node": "Persist In DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "List Files From Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File Download As PDF": {
      "main": [
        [
          {
            "node": "Extract from PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from PDF": {
      "main": [
        [
          {
            "node": "Merge Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Spreasheet as PDF": {
      "main": [
        [
          {
            "node": "Extract from PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Persist In DB": {
      "main": [
        [
          {
            "node": "Update Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Output": {
      "main": [
        [
          {
            "node": "Split the text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from Text": {
      "main": [
        [
          {
            "node": "Merge Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "dedfb72b-0e53-4a22-90ed-26a10189d305",
  "meta": {
    "instanceId": "558d88703fb65b2d0e44613bc35916258b0f0bf983c5d4730c00c424b77ca36a"
  },
  "id": "qRL8eRlNubCH482y",
  "tags": []
}