version: '3.8'

services:
  postgres-workflow:
    image: postgres:16-alpine
    restart: unless-stopped
    ports:
      - "${WORKFLOW_POSTGRES_PORT}:${WORKFLOW_POSTGRES_PORT}"
    environment:
      - POSTGRES_USER=${WORKFLOW_POSTGRES_USER}
      - POSTGRES_PASSWORD=${WORKFLOW_POSTGRES_PASSWORD}
      - POSTGRES_DB=${WORKFLOW_POSTGRES_DB}
      - PGPORT=${WORKFLOW_POSTGRES_PORT}
    command: -p ${WORKFLOW_POSTGRES_PORT}
    volumes:
      - postgres_agentic_storage:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${WORKFLOW_POSTGRES_USER} -d ${WORKFLOW_POSTGRES_DB} -p ${WORKFLOW_POSTGRES_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 5

  workflow-engine:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8100:8100"
    volumes:
      - ./src:/app/src
    environment:
      - DB_USER=${WORKFLOW_POSTGRES_USER}
      - DB_PASSWORD=${WORKFLOW_POSTGRES_PASSWORD}
      - DB_HOST=postgres-workflow
      - DB_PORT=${WORKFLOW_POSTGRES_PORT}
      - DB_NAME=${WORKFLOW_POSTGRES_DB}
      - ENVIRONMENT=${ENVIRONMENT}
      - LOG_LEVEL=${LOG_LEVEL}
      - LLM_API_KEY=${LLM_API_KEY}
      - LLM_MODEL=${LLM_MODEL}
      - LLM_BASE_URL=${LLM_BASE_URL}
      - MAX_WORKERS=${MAX_WORKERS}
      - TIMEOUT=${TIMEOUT}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8100/health"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 5s
    depends_on:
      postgres-workflow:
        condition: service_healthy

volumes:
  postgres_agentic_storage: